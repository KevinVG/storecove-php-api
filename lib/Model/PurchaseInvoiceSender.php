<?php
/**
 * PurchaseInvoiceSender
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PurchaseInvoiceSender Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseInvoiceSender implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseInvoiceSender';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'party_name' => 'string',
        'department' => 'string',
        'line1' => 'string',
        'line2' => 'string',
        'zip' => 'string',
        'city' => 'string',
        'county' => 'string',
        'country' => 'string',
        'billing_contact' => '\Swagger\Client\Model\PurchaseInvoiceSenderBillingContact',
        'peppol_identifiers' => '\Swagger\Client\Model\PeppolIdentifier[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'party_name' => null,
        'department' => null,
        'line1' => null,
        'line2' => null,
        'zip' => null,
        'city' => null,
        'county' => null,
        'country' => null,
        'billing_contact' => null,
        'peppol_identifiers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'party_name' => 'party_name',
        'department' => 'department',
        'line1' => 'line1',
        'line2' => 'line2',
        'zip' => 'zip',
        'city' => 'city',
        'county' => 'county',
        'country' => 'country',
        'billing_contact' => 'billing_contact',
        'peppol_identifiers' => 'peppol_identifiers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'party_name' => 'setPartyName',
        'department' => 'setDepartment',
        'line1' => 'setLine1',
        'line2' => 'setLine2',
        'zip' => 'setZip',
        'city' => 'setCity',
        'county' => 'setCounty',
        'country' => 'setCountry',
        'billing_contact' => 'setBillingContact',
        'peppol_identifiers' => 'setPeppolIdentifiers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'party_name' => 'getPartyName',
        'department' => 'getDepartment',
        'line1' => 'getLine1',
        'line2' => 'getLine2',
        'zip' => 'getZip',
        'city' => 'getCity',
        'county' => 'getCounty',
        'country' => 'getCountry',
        'billing_contact' => 'getBillingContact',
        'peppol_identifiers' => 'getPeppolIdentifiers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['party_name'] = isset($data['party_name']) ? $data['party_name'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['line1'] = isset($data['line1']) ? $data['line1'] : null;
        $this->container['line2'] = isset($data['line2']) ? $data['line2'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['billing_contact'] = isset($data['billing_contact']) ? $data['billing_contact'] : null;
        $this->container['peppol_identifiers'] = isset($data['peppol_identifiers']) ? $data['peppol_identifiers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets party_name
     *
     * @return string
     */
    public function getPartyName()
    {
        return $this->container['party_name'];
    }

    /**
     * Sets party_name
     *
     * @param string $party_name The party who sent the invoice.
     *
     * @return $this
     */
    public function setPartyName($party_name)
    {
        $this->container['party_name'] = $party_name;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department The department who sent the invoice.
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets line1
     *
     * @return string
     */
    public function getLine1()
    {
        return $this->container['line1'];
    }

    /**
     * Sets line1
     *
     * @param string $line1 The address
     *
     * @return $this
     */
    public function setLine1($line1)
    {
        $this->container['line1'] = $line1;

        return $this;
    }

    /**
     * Gets line2
     *
     * @return string
     */
    public function getLine2()
    {
        return $this->container['line2'];
    }

    /**
     * Sets line2
     *
     * @param string $line2 The address, line 2
     *
     * @return $this
     */
    public function setLine2($line2)
    {
        $this->container['line2'] = $line2;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip The zip code.
     *
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string $county The county.
     *
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The country.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets billing_contact
     *
     * @return \Swagger\Client\Model\PurchaseInvoiceSenderBillingContact
     */
    public function getBillingContact()
    {
        return $this->container['billing_contact'];
    }

    /**
     * Sets billing_contact
     *
     * @param \Swagger\Client\Model\PurchaseInvoiceSenderBillingContact $billing_contact The billing contact for the invoice.
     *
     * @return $this
     */
    public function setBillingContact($billing_contact)
    {
        $this->container['billing_contact'] = $billing_contact;

        return $this;
    }

    /**
     * Gets peppol_identifiers
     *
     * @return \Swagger\Client\Model\PeppolIdentifier[]
     */
    public function getPeppolIdentifiers()
    {
        return $this->container['peppol_identifiers'];
    }

    /**
     * Sets peppol_identifiers
     *
     * @param \Swagger\Client\Model\PeppolIdentifier[] $peppol_identifiers peppol_identifiers
     *
     * @return $this
     */
    public function setPeppolIdentifiers($peppol_identifiers)
    {
        $this->container['peppol_identifiers'] = $peppol_identifiers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


