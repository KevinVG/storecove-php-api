<?php
/**
 * AccountingCostCode
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AccountingCostCode Class Doc Comment
 *
 * @category Class
 * @description The code in the chart of accounts used by the receiver of the invoice.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountingCostCode implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountingCostCode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'list' => 'string',
        'list_version' => 'string',
        'list_agency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'list' => null,
        'list_version' => null,
        'list_agency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'list' => 'list',
        'list_version' => 'listVersion',
        'list_agency' => 'listAgency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'list' => 'setList',
        'list_version' => 'setListVersion',
        'list_agency' => 'setListAgency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'list' => 'getList',
        'list_version' => 'getListVersion',
        'list_agency' => 'getListAgency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['list'] = isset($data['list']) ? $data['list'] : null;
        $this->container['list_version'] = isset($data['list_version']) ? $data['list_version'] : null;
        $this->container['list_agency'] = isset($data['list_agency']) ? $data['list_agency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['code']) && (strlen($this->container['code']) < 1)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['list']) && (strlen($this->container['list']) < 1)) {
            $invalidProperties[] = "invalid value for 'list', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['list_version']) && (strlen($this->container['list_version']) < 1)) {
            $invalidProperties[] = "invalid value for 'list_version', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['list_agency']) && (strlen($this->container['list_agency']) < 1)) {
            $invalidProperties[] = "invalid value for 'list_agency', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['code']) < 1) {
            return false;
        }
        if (strlen($this->container['list']) < 1) {
            return false;
        }
        if (strlen($this->container['list_version']) < 1) {
            return false;
        }
        if (strlen($this->container['list_agency']) < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The buyer's accounting cost centre for this invoice(line), expressed as a code
     *
     * @return $this
     */
    public function setCode($code)
    {

        if (!is_null($code) && (strlen($code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $code when calling AccountingCostCode., must be bigger than or equal to 1.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets list
     *
     * @return string
     */
    public function getList()
    {
        return $this->container['list'];
    }

    /**
     * Sets list
     *
     * @param string $list The identification of a list of codes.
     *
     * @return $this
     */
    public function setList($list)
    {

        if (!is_null($list) && (strlen($list) < 1)) {
            throw new \InvalidArgumentException('invalid length for $list when calling AccountingCostCode., must be bigger than or equal to 1.');
        }

        $this->container['list'] = $list;

        return $this;
    }

    /**
     * Gets list_version
     *
     * @return string
     */
    public function getListVersion()
    {
        return $this->container['list_version'];
    }

    /**
     * Sets list_version
     *
     * @param string $list_version The version of the list of codes.
     *
     * @return $this
     */
    public function setListVersion($list_version)
    {

        if (!is_null($list_version) && (strlen($list_version) < 1)) {
            throw new \InvalidArgumentException('invalid length for $list_version when calling AccountingCostCode., must be bigger than or equal to 1.');
        }

        $this->container['list_version'] = $list_version;

        return $this;
    }

    /**
     * Gets list_agency
     *
     * @return string
     */
    public function getListAgency()
    {
        return $this->container['list_agency'];
    }

    /**
     * Sets list_agency
     *
     * @param string $list_agency An agency that maintains one or more lists of codes.
     *
     * @return $this
     */
    public function setListAgency($list_agency)
    {

        if (!is_null($list_agency) && (strlen($list_agency) < 1)) {
            throw new \InvalidArgumentException('invalid length for $list_agency when calling AccountingCostCode., must be bigger than or equal to 1.');
        }

        $this->container['list_agency'] = $list_agency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


