<?php
/**
 * PurchaseInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PurchaseInvoice Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseInvoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'guid' => 'string',
        'legal_entity_id' => 'int',
        'external_user_id' => 'string',
        'external_key' => 'string',
        'document' => 'string',
        'invoice_number' => 'string',
        'issue_date' => 'string',
        'tax_point_date' => 'string',
        'due_date' => 'string',
        'document_currency_code' => 'string',
        'vat_reverse_charge' => 'bool',
        'amount_including_vat' => 'float',
        'allowance_charge' => 'float',
        'payable_rounding_amount' => 'float',
        'payable_amount' => 'float',
        'source' => 'string',
        'sender' => '\Swagger\Client\Model\PurchaseInvoiceSender',
        'invoice_type' => 'string',
        'period_start' => 'string',
        'period_end' => 'string',
        'buyer_reference' => 'string',
        'billing_reference' => 'string',
        'contract_document_reference' => 'string',
        'invoice_lines' => '\Swagger\Client\Model\PurchaseInvoiceInvoiceLine[]',
        'accounting' => '\Swagger\Client\Model\PurchaseInvoiceAccountingDetails',
        'payment_means' => '\Swagger\Client\Model\PaymentMeans'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'guid' => 'uuid',
        'legal_entity_id' => 'int64',
        'external_user_id' => null,
        'external_key' => null,
        'document' => null,
        'invoice_number' => null,
        'issue_date' => null,
        'tax_point_date' => null,
        'due_date' => null,
        'document_currency_code' => null,
        'vat_reverse_charge' => null,
        'amount_including_vat' => null,
        'allowance_charge' => null,
        'payable_rounding_amount' => null,
        'payable_amount' => null,
        'source' => null,
        'sender' => null,
        'invoice_type' => null,
        'period_start' => null,
        'period_end' => null,
        'buyer_reference' => null,
        'billing_reference' => null,
        'contract_document_reference' => null,
        'invoice_lines' => null,
        'accounting' => null,
        'payment_means' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'guid' => 'guid',
        'legal_entity_id' => 'legal_entity_id',
        'external_user_id' => 'external_user_id',
        'external_key' => 'external_key',
        'document' => 'document',
        'invoice_number' => 'invoice_number',
        'issue_date' => 'issue_date',
        'tax_point_date' => 'tax_point_date',
        'due_date' => 'due_date',
        'document_currency_code' => 'document_currency_code',
        'vat_reverse_charge' => 'vat_reverse_charge',
        'amount_including_vat' => 'amount_including_vat',
        'allowance_charge' => 'allowance_charge',
        'payable_rounding_amount' => 'payable_rounding_amount',
        'payable_amount' => 'payable_amount',
        'source' => 'source',
        'sender' => 'sender',
        'invoice_type' => 'invoice_type',
        'period_start' => 'period_start',
        'period_end' => 'period_end',
        'buyer_reference' => 'buyer_reference',
        'billing_reference' => 'billing_reference',
        'contract_document_reference' => 'contract_document_reference',
        'invoice_lines' => 'invoice_lines',
        'accounting' => 'accounting',
        'payment_means' => 'payment_means'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'guid' => 'setGuid',
        'legal_entity_id' => 'setLegalEntityId',
        'external_user_id' => 'setExternalUserId',
        'external_key' => 'setExternalKey',
        'document' => 'setDocument',
        'invoice_number' => 'setInvoiceNumber',
        'issue_date' => 'setIssueDate',
        'tax_point_date' => 'setTaxPointDate',
        'due_date' => 'setDueDate',
        'document_currency_code' => 'setDocumentCurrencyCode',
        'vat_reverse_charge' => 'setVatReverseCharge',
        'amount_including_vat' => 'setAmountIncludingVat',
        'allowance_charge' => 'setAllowanceCharge',
        'payable_rounding_amount' => 'setPayableRoundingAmount',
        'payable_amount' => 'setPayableAmount',
        'source' => 'setSource',
        'sender' => 'setSender',
        'invoice_type' => 'setInvoiceType',
        'period_start' => 'setPeriodStart',
        'period_end' => 'setPeriodEnd',
        'buyer_reference' => 'setBuyerReference',
        'billing_reference' => 'setBillingReference',
        'contract_document_reference' => 'setContractDocumentReference',
        'invoice_lines' => 'setInvoiceLines',
        'accounting' => 'setAccounting',
        'payment_means' => 'setPaymentMeans'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'guid' => 'getGuid',
        'legal_entity_id' => 'getLegalEntityId',
        'external_user_id' => 'getExternalUserId',
        'external_key' => 'getExternalKey',
        'document' => 'getDocument',
        'invoice_number' => 'getInvoiceNumber',
        'issue_date' => 'getIssueDate',
        'tax_point_date' => 'getTaxPointDate',
        'due_date' => 'getDueDate',
        'document_currency_code' => 'getDocumentCurrencyCode',
        'vat_reverse_charge' => 'getVatReverseCharge',
        'amount_including_vat' => 'getAmountIncludingVat',
        'allowance_charge' => 'getAllowanceCharge',
        'payable_rounding_amount' => 'getPayableRoundingAmount',
        'payable_amount' => 'getPayableAmount',
        'source' => 'getSource',
        'sender' => 'getSender',
        'invoice_type' => 'getInvoiceType',
        'period_start' => 'getPeriodStart',
        'period_end' => 'getPeriodEnd',
        'buyer_reference' => 'getBuyerReference',
        'billing_reference' => 'getBillingReference',
        'contract_document_reference' => 'getContractDocumentReference',
        'invoice_lines' => 'getInvoiceLines',
        'accounting' => 'getAccounting',
        'payment_means' => 'getPaymentMeans'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SOURCE_PEPPOL = 'peppol';
    const SOURCE_SCRIPT = 'script';
    const SOURCE_SUPPLIER = 'supplier';
    const SOURCE_EMAIL = 'email';
    const INVOICE_TYPE_INVOICE = 'invoice';
    const INVOICE_TYPE_CREDITNOTE = 'creditnote';
    const INVOICE_TYPE_CORRECTIONINVOICE = 'correctioninvoice';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_PEPPOL,
            self::SOURCE_SCRIPT,
            self::SOURCE_SUPPLIER,
            self::SOURCE_EMAIL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceTypeAllowableValues()
    {
        return [
            self::INVOICE_TYPE_INVOICE,
            self::INVOICE_TYPE_CREDITNOTE,
            self::INVOICE_TYPE_CORRECTIONINVOICE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['guid'] = isset($data['guid']) ? $data['guid'] : null;
        $this->container['legal_entity_id'] = isset($data['legal_entity_id']) ? $data['legal_entity_id'] : null;
        $this->container['external_user_id'] = isset($data['external_user_id']) ? $data['external_user_id'] : null;
        $this->container['external_key'] = isset($data['external_key']) ? $data['external_key'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['issue_date'] = isset($data['issue_date']) ? $data['issue_date'] : null;
        $this->container['tax_point_date'] = isset($data['tax_point_date']) ? $data['tax_point_date'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['document_currency_code'] = isset($data['document_currency_code']) ? $data['document_currency_code'] : null;
        $this->container['vat_reverse_charge'] = isset($data['vat_reverse_charge']) ? $data['vat_reverse_charge'] : null;
        $this->container['amount_including_vat'] = isset($data['amount_including_vat']) ? $data['amount_including_vat'] : null;
        $this->container['allowance_charge'] = isset($data['allowance_charge']) ? $data['allowance_charge'] : null;
        $this->container['payable_rounding_amount'] = isset($data['payable_rounding_amount']) ? $data['payable_rounding_amount'] : null;
        $this->container['payable_amount'] = isset($data['payable_amount']) ? $data['payable_amount'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['period_start'] = isset($data['period_start']) ? $data['period_start'] : null;
        $this->container['period_end'] = isset($data['period_end']) ? $data['period_end'] : null;
        $this->container['buyer_reference'] = isset($data['buyer_reference']) ? $data['buyer_reference'] : null;
        $this->container['billing_reference'] = isset($data['billing_reference']) ? $data['billing_reference'] : null;
        $this->container['contract_document_reference'] = isset($data['contract_document_reference']) ? $data['contract_document_reference'] : null;
        $this->container['invoice_lines'] = isset($data['invoice_lines']) ? $data['invoice_lines'] : null;
        $this->container['accounting'] = isset($data['accounting']) ? $data['accounting'] : null;
        $this->container['payment_means'] = isset($data['payment_means']) ? $data['payment_means'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($this->container['source'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!in_array($this->container['invoice_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'invoice_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($this->container['source'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!in_array($this->container['invoice_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets guid
     *
     * @return string
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string $guid The GUID of the invoice
     *
     * @return $this
     */
    public function setGuid($guid)
    {
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets legal_entity_id
     *
     * @return int
     */
    public function getLegalEntityId()
    {
        return $this->container['legal_entity_id'];
    }

    /**
     * Sets legal_entity_id
     *
     * @param int $legal_entity_id The id of the LegalEntity the invoice was received for.
     *
     * @return $this
     */
    public function setLegalEntityId($legal_entity_id)
    {
        $this->container['legal_entity_id'] = $legal_entity_id;

        return $this;
    }

    /**
     * Gets external_user_id
     *
     * @return string
     */
    public function getExternalUserId()
    {
        return $this->container['external_user_id'];
    }

    /**
     * Sets external_user_id
     *
     * @param string $external_user_id Used for the embedded portal retrieval service. The external_user_id you provided when the ShopAccount was created.
     *
     * @return $this
     */
    public function setExternalUserId($external_user_id)
    {
        $this->container['external_user_id'] = $external_user_id;

        return $this;
    }

    /**
     * Gets external_key
     *
     * @return string
     */
    public function getExternalKey()
    {
        return $this->container['external_key'];
    }

    /**
     * Sets external_key
     *
     * @param string $external_key Used for accountants. The id you specified for the organization.
     *
     * @return $this
     */
    public function setExternalKey($external_key)
    {
        $this->container['external_key'] = $external_key;

        return $this;
    }

    /**
     * Gets document
     *
     * @return string
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param string $document The Base64 encoded PDF document associated with the invoice.
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number The invoicenumber.
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets issue_date
     *
     * @return string
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param string $issue_date The date the invoice was issued. Format \"YYYY-MM-DD\".
     *
     * @return $this
     */
    public function setIssueDate($issue_date)
    {
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets tax_point_date
     *
     * @return string
     */
    public function getTaxPointDate()
    {
        return $this->container['tax_point_date'];
    }

    /**
     * Sets tax_point_date
     *
     * @param string $tax_point_date The date the invoice was issued for tax purposes. In most countries MUST match the issue_date. Format \"YYYY-MM-DD\".
     *
     * @return $this
     */
    public function setTaxPointDate($tax_point_date)
    {
        $this->container['tax_point_date'] = $tax_point_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string $due_date The date the invoice must be payed by. Format \"YYYY-MM-DD\".
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets document_currency_code
     *
     * @return string
     */
    public function getDocumentCurrencyCode()
    {
        return $this->container['document_currency_code'];
    }

    /**
     * Sets document_currency_code
     *
     * @param string $document_currency_code The ISO 4217 currency for the invoice.
     *
     * @return $this
     */
    public function setDocumentCurrencyCode($document_currency_code)
    {
        $this->container['document_currency_code'] = $document_currency_code;

        return $this;
    }

    /**
     * Gets vat_reverse_charge
     *
     * @return bool
     */
    public function getVatReverseCharge()
    {
        return $this->container['vat_reverse_charge'];
    }

    /**
     * Sets vat_reverse_charge
     *
     * @param bool $vat_reverse_charge Whether or not the invoice is reverse charged.
     *
     * @return $this
     */
    public function setVatReverseCharge($vat_reverse_charge)
    {
        $this->container['vat_reverse_charge'] = $vat_reverse_charge;

        return $this;
    }

    /**
     * Gets amount_including_vat
     *
     * @return float
     */
    public function getAmountIncludingVat()
    {
        return $this->container['amount_including_vat'];
    }

    /**
     * Sets amount_including_vat
     *
     * @param float $amount_including_vat The total invoice amount payable, including VAT. This is equal to the sum of the invoice_lines (amount_excluding_vat + vat.amount)
     *
     * @return $this
     */
    public function setAmountIncludingVat($amount_including_vat)
    {
        $this->container['amount_including_vat'] = $amount_including_vat;

        return $this;
    }

    /**
     * Gets allowance_charge
     *
     * @return float
     */
    public function getAllowanceCharge()
    {
        return $this->container['allowance_charge'];
    }

    /**
     * Sets allowance_charge
     *
     * @param float $allowance_charge A correction on the amount to pay, for instance if the invoice has been prepaid, in which case it will be negative.
     *
     * @return $this
     */
    public function setAllowanceCharge($allowance_charge)
    {
        $this->container['allowance_charge'] = $allowance_charge;

        return $this;
    }

    /**
     * Gets payable_rounding_amount
     *
     * @return float
     */
    public function getPayableRoundingAmount()
    {
        return $this->container['payable_rounding_amount'];
    }

    /**
     * Sets payable_rounding_amount
     *
     * @param float $payable_rounding_amount The difference between the invoice total and the sum of the invoice lines.
     *
     * @return $this
     */
    public function setPayableRoundingAmount($payable_rounding_amount)
    {
        $this->container['payable_rounding_amount'] = $payable_rounding_amount;

        return $this;
    }

    /**
     * Gets payable_amount
     *
     * @return float
     */
    public function getPayableAmount()
    {
        return $this->container['payable_amount'];
    }

    /**
     * Sets payable_amount
     *
     * @param float $payable_amount The total invoice amount payable including VAT. This is equal to amount_including_vat + allowance_charge + payable_rounding_amount. This property is redundant and provided only to make invoice processing more easy. You can also choose to only store this property, instead of the underlying fields.
     *
     * @return $this
     */
    public function setPayableAmount($payable_amount)
    {
        $this->container['payable_amount'] = $payable_amount;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source The source the invoice was received from.
     *
     * @return $this
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \Swagger\Client\Model\PurchaseInvoiceSender
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \Swagger\Client\Model\PurchaseInvoiceSender $sender The organzation that sent the invoice.
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return string
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param string $invoice_type The type of invoice.
     *
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!is_null($invoice_type) && !in_array($invoice_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'invoice_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets period_start
     *
     * @return string
     */
    public function getPeriodStart()
    {
        return $this->container['period_start'];
    }

    /**
     * Sets period_start
     *
     * @param string $period_start The start date of the period this invoice relates to. Format \"YYYY-MM-DD\".
     *
     * @return $this
     */
    public function setPeriodStart($period_start)
    {
        $this->container['period_start'] = $period_start;

        return $this;
    }

    /**
     * Gets period_end
     *
     * @return string
     */
    public function getPeriodEnd()
    {
        return $this->container['period_end'];
    }

    /**
     * Sets period_end
     *
     * @param string $period_end The end date of the period this invoice relates to. Format \"YYYY-MM-DD\".
     *
     * @return $this
     */
    public function setPeriodEnd($period_end)
    {
        $this->container['period_end'] = $period_end;

        return $this;
    }

    /**
     * Gets buyer_reference
     *
     * @return string
     */
    public function getBuyerReference()
    {
        return $this->container['buyer_reference'];
    }

    /**
     * Sets buyer_reference
     *
     * @param string $buyer_reference The end date of the period this invoice relates to. Format \"YYYY-MM-DD\".
     *
     * @return $this
     */
    public function setBuyerReference($buyer_reference)
    {
        $this->container['buyer_reference'] = $buyer_reference;

        return $this;
    }

    /**
     * Gets billing_reference
     *
     * @return string
     */
    public function getBillingReference()
    {
        return $this->container['billing_reference'];
    }

    /**
     * Sets billing_reference
     *
     * @param string $billing_reference The end date of the period this invoice relates to. Format \"YYYY-MM-DD\".
     *
     * @return $this
     */
    public function setBillingReference($billing_reference)
    {
        $this->container['billing_reference'] = $billing_reference;

        return $this;
    }

    /**
     * Gets contract_document_reference
     *
     * @return string
     */
    public function getContractDocumentReference()
    {
        return $this->container['contract_document_reference'];
    }

    /**
     * Sets contract_document_reference
     *
     * @param string $contract_document_reference The end date of the period this invoice relates to. Format \"YYYY-MM-DD\".
     *
     * @return $this
     */
    public function setContractDocumentReference($contract_document_reference)
    {
        $this->container['contract_document_reference'] = $contract_document_reference;

        return $this;
    }

    /**
     * Gets invoice_lines
     *
     * @return \Swagger\Client\Model\PurchaseInvoiceInvoiceLine[]
     */
    public function getInvoiceLines()
    {
        return $this->container['invoice_lines'];
    }

    /**
     * Sets invoice_lines
     *
     * @param \Swagger\Client\Model\PurchaseInvoiceInvoiceLine[] $invoice_lines invoice_lines
     *
     * @return $this
     */
    public function setInvoiceLines($invoice_lines)
    {
        $this->container['invoice_lines'] = $invoice_lines;

        return $this;
    }

    /**
     * Gets accounting
     *
     * @return \Swagger\Client\Model\PurchaseInvoiceAccountingDetails
     */
    public function getAccounting()
    {
        return $this->container['accounting'];
    }

    /**
     * Sets accounting
     *
     * @param \Swagger\Client\Model\PurchaseInvoiceAccountingDetails $accounting The accounting details for the invoice.
     *
     * @return $this
     */
    public function setAccounting($accounting)
    {
        $this->container['accounting'] = $accounting;

        return $this;
    }

    /**
     * Gets payment_means
     *
     * @return \Swagger\Client\Model\PaymentMeans
     */
    public function getPaymentMeans()
    {
        return $this->container['payment_means'];
    }

    /**
     * Sets payment_means
     *
     * @param \Swagger\Client\Model\PaymentMeans $payment_means payment_means
     *
     * @return $this
     */
    public function setPaymentMeans($payment_means)
    {
        $this->container['payment_means'] = $payment_means;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


