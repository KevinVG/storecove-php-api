<?php
/**
 * LegalEntityUpdate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LegalEntityUpdate Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LegalEntityUpdate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LegalEntityUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'party_name' => 'string',
        'line1' => 'string',
        'line2' => 'string',
        'city' => 'string',
        'zip' => 'string',
        'county' => 'string',
        'country' => '\Swagger\Client\Model\Country'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'party_name' => null,
        'line1' => null,
        'line2' => null,
        'city' => null,
        'zip' => null,
        'county' => null,
        'country' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'party_name' => 'party_name',
        'line1' => 'line1',
        'line2' => 'line2',
        'city' => 'city',
        'zip' => 'zip',
        'county' => 'county',
        'country' => 'country'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'party_name' => 'setPartyName',
        'line1' => 'setLine1',
        'line2' => 'setLine2',
        'city' => 'setCity',
        'zip' => 'setZip',
        'county' => 'setCounty',
        'country' => 'setCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'party_name' => 'getPartyName',
        'line1' => 'getLine1',
        'line2' => 'getLine2',
        'city' => 'getCity',
        'zip' => 'getZip',
        'county' => 'getCounty',
        'country' => 'getCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['party_name'] = isset($data['party_name']) ? $data['party_name'] : null;
        $this->container['line1'] = isset($data['line1']) ? $data['line1'] : null;
        $this->container['line2'] = isset($data['line2']) ? $data['line2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['party_name']) && (strlen($this->container['party_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'party_name', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['party_name']) && (strlen($this->container['party_name']) < 2)) {
            $invalidProperties[] = "invalid value for 'party_name', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['line1']) && (strlen($this->container['line1']) > 64)) {
            $invalidProperties[] = "invalid value for 'line1', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['line1']) && (strlen($this->container['line1']) < 2)) {
            $invalidProperties[] = "invalid value for 'line1', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['line2']) && (strlen($this->container['line2']) > 64)) {
            $invalidProperties[] = "invalid value for 'line2', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['city']) && (strlen($this->container['city']) > 64)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['city']) && (strlen($this->container['city']) < 2)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['zip']) && (strlen($this->container['zip']) > 32)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['zip']) && (strlen($this->container['zip']) < 2)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['county']) && (strlen($this->container['county']) > 64)) {
            $invalidProperties[] = "invalid value for 'county', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['party_name']) > 64) {
            return false;
        }
        if (strlen($this->container['party_name']) < 2) {
            return false;
        }
        if (strlen($this->container['line1']) > 64) {
            return false;
        }
        if (strlen($this->container['line1']) < 2) {
            return false;
        }
        if (strlen($this->container['line2']) > 64) {
            return false;
        }
        if (strlen($this->container['city']) > 64) {
            return false;
        }
        if (strlen($this->container['city']) < 2) {
            return false;
        }
        if (strlen($this->container['zip']) > 32) {
            return false;
        }
        if (strlen($this->container['zip']) < 2) {
            return false;
        }
        if (strlen($this->container['county']) > 64) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The Storecove assigned id for the LegalEntity.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets party_name
     *
     * @return string
     */
    public function getPartyName()
    {
        return $this->container['party_name'];
    }

    /**
     * Sets party_name
     *
     * @param string $party_name The name of the company.
     *
     * @return $this
     */
    public function setPartyName($party_name)
    {
        if (!is_null($party_name) && (strlen($party_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $party_name when calling LegalEntityUpdate., must be smaller than or equal to 64.');
        }
        if (!is_null($party_name) && (strlen($party_name) < 2)) {
            throw new \InvalidArgumentException('invalid length for $party_name when calling LegalEntityUpdate., must be bigger than or equal to 2.');
        }

        $this->container['party_name'] = $party_name;

        return $this;
    }

    /**
     * Gets line1
     *
     * @return string
     */
    public function getLine1()
    {
        return $this->container['line1'];
    }

    /**
     * Sets line1
     *
     * @param string $line1 The first address line.
     *
     * @return $this
     */
    public function setLine1($line1)
    {
        if (!is_null($line1) && (strlen($line1) > 64)) {
            throw new \InvalidArgumentException('invalid length for $line1 when calling LegalEntityUpdate., must be smaller than or equal to 64.');
        }
        if (!is_null($line1) && (strlen($line1) < 2)) {
            throw new \InvalidArgumentException('invalid length for $line1 when calling LegalEntityUpdate., must be bigger than or equal to 2.');
        }

        $this->container['line1'] = $line1;

        return $this;
    }

    /**
     * Gets line2
     *
     * @return string
     */
    public function getLine2()
    {
        return $this->container['line2'];
    }

    /**
     * Sets line2
     *
     * @param string $line2 The second address line, if applicable
     *
     * @return $this
     */
    public function setLine2($line2)
    {
        if (!is_null($line2) && (strlen($line2) > 64)) {
            throw new \InvalidArgumentException('invalid length for $line2 when calling LegalEntityUpdate., must be smaller than or equal to 64.');
        }

        $this->container['line2'] = $line2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city.
     *
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (strlen($city) > 64)) {
            throw new \InvalidArgumentException('invalid length for $city when calling LegalEntityUpdate., must be smaller than or equal to 64.');
        }
        if (!is_null($city) && (strlen($city) < 2)) {
            throw new \InvalidArgumentException('invalid length for $city when calling LegalEntityUpdate., must be bigger than or equal to 2.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip The zipcode.
     *
     * @return $this
     */
    public function setZip($zip)
    {
        if (!is_null($zip) && (strlen($zip) > 32)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling LegalEntityUpdate., must be smaller than or equal to 32.');
        }
        if (!is_null($zip) && (strlen($zip) < 2)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling LegalEntityUpdate., must be bigger than or equal to 2.');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string $county County, if applicable
     *
     * @return $this
     */
    public function setCounty($county)
    {
        if (!is_null($county) && (strlen($county) > 64)) {
            throw new \InvalidArgumentException('invalid length for $county when calling LegalEntityUpdate., must be smaller than or equal to 64.');
        }

        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \Swagger\Client\Model\Country
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \Swagger\Client\Model\Country $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


