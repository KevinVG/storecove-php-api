<?php
/**
 * InvoiceSubmission
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storecove API
 *
 * Storecove API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: apisupport@storecove.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceSubmission Class Doc Comment
 *
 * @category Class
 * @description The invoice you want Storecove to process, with some meta-data.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceSubmission implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceSubmission';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mode' => 'string',
        'supplier_id' => 'int',
        'legal_supplier_id' => 'int',
        'legal_entity_id' => 'int',
        'invoice_recipient' => '\Swagger\Client\Model\InvoiceRecipient',
        'document' => 'string',
        'document_url' => 'string',
        'invoice' => '\Swagger\Client\Model\Invoice'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mode' => null,
        'supplier_id' => null,
        'legal_supplier_id' => null,
        'legal_entity_id' => null,
        'invoice_recipient' => null,
        'document' => null,
        'document_url' => 'uri',
        'invoice' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mode' => 'mode',
        'supplier_id' => 'supplierId',
        'legal_supplier_id' => 'legalSupplierId',
        'legal_entity_id' => 'legalEntityId',
        'invoice_recipient' => 'invoiceRecipient',
        'document' => 'document',
        'document_url' => 'documentUrl',
        'invoice' => 'invoice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mode' => 'setMode',
        'supplier_id' => 'setSupplierId',
        'legal_supplier_id' => 'setLegalSupplierId',
        'legal_entity_id' => 'setLegalEntityId',
        'invoice_recipient' => 'setInvoiceRecipient',
        'document' => 'setDocument',
        'document_url' => 'setDocumentUrl',
        'invoice' => 'setInvoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mode' => 'getMode',
        'supplier_id' => 'getSupplierId',
        'legal_supplier_id' => 'getLegalSupplierId',
        'legal_entity_id' => 'getLegalEntityId',
        'invoice_recipient' => 'getInvoiceRecipient',
        'document' => 'getDocument',
        'document_url' => 'getDocumentUrl',
        'invoice' => 'getInvoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MODE_DIRECT = 'direct';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_DIRECT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['supplier_id'] = isset($data['supplier_id']) ? $data['supplier_id'] : null;
        $this->container['legal_supplier_id'] = isset($data['legal_supplier_id']) ? $data['legal_supplier_id'] : null;
        $this->container['legal_entity_id'] = isset($data['legal_entity_id']) ? $data['legal_entity_id'] : null;
        $this->container['invoice_recipient'] = isset($data['invoice_recipient']) ? $data['invoice_recipient'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['document_url'] = isset($data['document_url']) ? $data['document_url'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModeAllowableValues();
        if (!in_array($this->container['mode'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['invoice_recipient'] === null) {
            $invalidProperties[] = "'invoice_recipient' can't be null";
        }
        if (!is_null($this->container['document']) && (strlen($this->container['document']) < 5)) {
            $invalidProperties[] = "invalid value for 'document', the character length must be bigger than or equal to 5.";
        }

        if ($this->container['invoice'] === null) {
            $invalidProperties[] = "'invoice' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getModeAllowableValues();
        if (!in_array($this->container['mode'], $allowedValues)) {
            return false;
        }
        if ($this->container['invoice_recipient'] === null) {
            return false;
        }
        if (strlen($this->container['document']) < 5) {
            return false;
        }
        if ($this->container['invoice'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode DEPRECATED. The mode in which to run this invoice submission.
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return int
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param int $supplier_id DEPRECATED.
     *
     * @return $this
     */
    public function setSupplierId($supplier_id)
    {
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets legal_supplier_id
     *
     * @return int
     */
    public function getLegalSupplierId()
    {
        return $this->container['legal_supplier_id'];
    }

    /**
     * Sets legal_supplier_id
     *
     * @param int $legal_supplier_id DEPRECATED. Use legalEntityId
     *
     * @return $this
     */
    public function setLegalSupplierId($legal_supplier_id)
    {
        $this->container['legal_supplier_id'] = $legal_supplier_id;

        return $this;
    }

    /**
     * Gets legal_entity_id
     *
     * @return int
     */
    public function getLegalEntityId()
    {
        return $this->container['legal_entity_id'];
    }

    /**
     * Sets legal_entity_id
     *
     * @param int $legal_entity_id The id of the LegalEntity this invoice should be sent for.
     *
     * @return $this
     */
    public function setLegalEntityId($legal_entity_id)
    {
        $this->container['legal_entity_id'] = $legal_entity_id;

        return $this;
    }

    /**
     * Gets invoice_recipient
     *
     * @return \Swagger\Client\Model\InvoiceRecipient
     */
    public function getInvoiceRecipient()
    {
        return $this->container['invoice_recipient'];
    }

    /**
     * Sets invoice_recipient
     *
     * @param \Swagger\Client\Model\InvoiceRecipient $invoice_recipient invoice_recipient
     *
     * @return $this
     */
    public function setInvoiceRecipient($invoice_recipient)
    {
        $this->container['invoice_recipient'] = $invoice_recipient;

        return $this;
    }

    /**
     * Gets document
     *
     * @return string
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param string $document The invoice in PDF form. The document should be base64 encoded and the enocded string length should not exceed 2MB (2097152 bytes).
     *
     * @return $this
     */
    public function setDocument($document)
    {

        if (!is_null($document) && (strlen($document) < 5)) {
            throw new \InvalidArgumentException('invalid length for $document when calling InvoiceSubmission., must be bigger than or equal to 5.');
        }

        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets document_url
     *
     * @return string
     */
    public function getDocumentUrl()
    {
        return $this->container['document_url'];
    }

    /**
     * Sets document_url
     *
     * @param string $document_url A URL to retrieve the PDF document via HTTP GET. If the link expires, please allow at least 7 days of validity.
     *
     * @return $this
     */
    public function setDocumentUrl($document_url)
    {
        $this->container['document_url'] = $document_url;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \Swagger\Client\Model\Invoice
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \Swagger\Client\Model\Invoice $invoice invoice
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


